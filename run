#! /usr/bin/env bash

set -euo pipefail

# Define the versions of the two docker images
django_image="ubuntudesign/django:v1.2.2"
yarn_image="ubuntudesign/yarn:v0.1.0"

# Usage instructions
USAGE="Usage
===

  $ ./run \\
    [-p|--port NUM]          # Specify local port for server \\
    [-m|--node-module PATH]  # A path to a local node module to use instead of the installed dependencies \\
    [--no-debug]             # Turn off Django's DEBUG setting \\
    [COMMAND]                # Optionally provide a command to run

If no COMMAND is provided, \`start\` will be run.

Commands
---

- start [-w|--watch]: Run the development server (optionally watching for Sass changes) \\
- watch: Run \`yarn run watch\`
- build: Run \`yarn run build\`
- test: Run \`yarn run test\` and \`./manage.py test\`
- yarn <args>: Run yarn
- django <args>: Run ./manage.py <args>
- clean: Remove all images and containers, any installed dependencies and the .docker-project file

Persistent options
---

The options can also be defined in a local \`.env\` file, e.g.:

  # These are the default settings
  PORT=8000                 # Run the server on local port 8000
  DJANGO_DEBUG=true         # Enable Django's DEBUG mode
"

##
# Check docker is installed correctly
##
if ! command -v docker >/dev/null 2>&1; then
    echo "
    Error: Docker not installed
    ==
    Please install Docker before continuing:
    https://www.docker.com/products/docker
    "
    exit 1
fi
if grep -q '^docker:' /etc/group && ! groups | grep -q '\bdocker\b'; then
    echo "
    Error: `whoami` not in docker group
    ===
    Please add this user to the docker group, e.g. with:
    \$ newgrp docker
    "
    exit 1
fi

# Generate the project name
if [[ -f ".docker-project" ]]; then
  project=$(cat .docker-project)
else
  project=$((pwd | md5sum 2> /dev/null || md5 -q -s `pwd`) | cut -c1-8)
  echo $project > .docker-project
fi

# Defaults
PORT=8000
DJANGO_DEBUG=true

# Read current environment variables
if [ -f .env ]; then
    export $(cat .env | grep -v ^\# | xargs)
fi

# Optional arguments
# ==
#  --port {port} - The local port to run the web service on
#  --node-module {path} - Path to a local version of a node module
#  --no-debug - Turn off Django DEBUG mode
#  --help - Show usage instructions
invalid() {
    echo "Command not recognised."
    echo ""
    echo "$USAGE"
    exit 1
}

module_volumes=()

while [[ -n "${1:-}" ]] && [[ "${1:0:1}" == "-" ]]; do
    key="$1"

    case $key in
        -p|--port)
            if [ -z "${2:-}" ]; then invalid; fi
            PORT="$2"
            shift
        ;;
        -m|--node-module)
            if [ -z "${2:-}" ]; then invalid; fi
            module_volumes+=("--volume" "${2}":"`pwd`/node_modules/$(basename ${2})")
            shift
        ;;
        --no-debug) DJANGO_DEBUG=false ;;
        -h|--help) echo "$USAGE"; exit ;;
        *) invalid ;;
    esac
    shift
done

docker_run() {
  # The standard set of "docker run" arguments

  [ -t 1 ] && tty="--tty --interactive" || tty=""  # Do we have a terminal?
  [ -f .env ] && env_file="--env-file .env" || env_file=""  # Do we have an env file?

  docker run  \
    --user $(id -u):$(id -g)  `# Use the current user inside container`  \
    ${env_file}               `# Pass environment variables into the container, if file exists`  \
    --rm                      `# Tidy up by deleting the container when it stops`  \
    --volume `pwd`:`pwd`      `# Mirror current directory inside container`  \
    --workdir `pwd`           `# Set current directory to the image's work directory`  \
    ${tty}                    `# Attach a pseudo-terminal, if relevant`  \
    $@                        `# Extra arguments`
}

docker_django () {
  # Run Django using the docker image
  docker_run  \
    --volume ${project}-dependencies:/usr/local/lib/python2.7/site-packages  `# Store dependencies in a docker volume`  \
    --publish ${PORT}:${PORT}  `# Export the server port`  \
    $django_image $@  `# Run the django image`
}

docker_yarn () {
  # Run "yarn" from the "node" image
  docker_run  \
    ${module_volumes[@]+"${module_volumes[@]}"}  `# Add any override modules as volumes`  \
    $yarn_image $@               `# Use the image for node version 7`
}

yarn_install () {
  # Install yarn dependencies, without module overrides
  docker_run $yarn_image install
}


# Do the real business
run_command=${1:-}
if [[ -n "${run_command}" ]]; then shift; fi

case $run_command in
  ""|"start")
    yarn_install
    docker_yarn run build

    # Run watch command in the background
    if [[ ${1:-} == "--watch" ]] || [[ ${1:-} == "-w" ]]; then
      container_name="yarn-$(date +'%s')"
      trap 'docker kill ${container_name}' EXIT
      docker_run  \
        --name ${container_name}  `# Name the unit so it can be killed` \
        --detach                  `# Run in the background` \
        $yarn_image run watch     `# Use the image for node version 7`
    fi

    docker_django
  ;;
  "watch")
    yarn_install
    docker_yarn run build
    docker_yarn run watch
  ;;
  "build")
    yarn_install
    docker_yarn run build
  ;;
  "test")
    yarn_install
    docker_yarn run test
    docker_django test
  ;;
  "clean")
    rm -rf node_modules .docker-project
    docker volume rm --force ${project}-dependencies
  ;;
  "django") docker_django $@ ;;
  "yarn") docker_yarn $@ ;;
  *) invalid ;;
esac

